Uuwaplan, набор скриптов на bash для планирования.

Набор скриптов позволяет вести простую базу данных заметок, распределенных по датам и категориям. БД представляет собой простой текстовый файл .plans.txt, расположенный в домашней директории пользователя.  В набор входит управляющий скрипт plan.sh, с помощью которого вносятся и редактируются заметки, и скрипты weekplan.sh и plan_cal.sh, использующиеся совместно с Conky для вывода заметок.

Для удобства использования можно сделать в /usr/local/bin символические ссылки на скрипты, например plan -> plan.sh, rplan ->rplan.sh В таком случае необходимо также сделать ссылку libplan.sh -> libplan.sh, поскольку скрипты устроены так, что ищут файл libplan.sh в той директории, где находятся сами. Т.е. при вызове скрипта plan.sh командой plan ..., будет выполняться скрипт /usr/local/bin/plan, который станет искать libplan.sh также в /usr/local/bin.  


Подробное описание скриптов.

I. plan.sh
Управляющий скрипт, с помощью которого производится добавление и редактирование заметок. В общем виде вызов скрипта выглядит так:

./plan.sh КОМАНДА ПАРАМЕТРЫ

Каждая команда имеет свой набор параметров. Все параметры делятся на несколько групп:

1) ДАТА -- дата, записанная в любом формате, который может воспринять команда date, например:

Абсолютные даты: "20120523", "2012-05-23", "05/23/2012", "@0" (секунды с начала UNIX-эпохи)
Относительные даты: "+1 day", "+1 week", "+1 month", "+1 month +1 day" 

Параметр СМЕЩЕНИЕ, используемый для обозначения промежутка между повторяющимися заметками, также принадлежит к этой группе, однако в силу своей природы должен использовать только относительный вариант записи.

2) ГРУППА -- слово, обозначающее какую-либо группу заметок. Может быть произвольным: "семья", "работа", "экзамены". Следует, однако обратить внимание, что скрипт weekplan.sh по умолчанию отводит мало места под категорию -- 6 символов. Поэтому в случае использования длинных слов рекомендуется создать конфигурационный файл для этого скрипта. Подробнее см. в описании скрипта weekplan.sh. Если обозначение группы содержит символ "!" то эта заметка считается важной и выделяется цветом в weekplan,а ее дата -- на календаре.

3) ТЕКСТ -- текст заметки. На данный момент поддерживаются только однострочные заметки. Если заметка состоит из нескольких слов, их необязательно забирать в кавычки, поскольку скрипт интерпретирует все параметры после второго как текст заметки.

Также ТЕКСТ используется при составлении поискового запроса. При использовании его в таком качестве следует помнить, что важен порядок слов, например "выезд шашлыки" и "шашлыки выезд" -- разные запросы.

Описание команд:

a (или add):    Добавляет заметку в базу. Формат вызова следующий: [-e] ДАТА ГРУППА [ТЕКСТ]
Примеры:        ./plan.sh add 2012-12-31 праздник Новый Год
                ./plan.sh a "tomorrow +1 month" платежи Очередной платеж по кредиту

r (или repeat): Добавляет заметку в базу, затем копирует ее через равные промежутки времени. Формат: [-e] ДАТА СМЕЩЕНИЕ КОЛИЧЕСТВО ГРУППА [ТЕКСТ]
Примеры:        ./plan.sh repeat "next Monday" "+3 day" 25 досуг Спортзал каждые 3 дня, абонемент на 25 посещений.
                ./plan.sh r "2012-07-01" "+1 year" 100 личное День рождения Маши

m (или move):   Позволяет перенести существующую заметку на новую дату. Формат: НОВАЯ_ДАТА [СТАРАЯ_ДАТА] [ГРУППА] ТЕКСТ. Параметры СТАРАЯ_ДАТА, ГРУППА и ТЕКСТ используются для обозначения нужной заметки при поиске. ТЕКСТ может содержать любой набор слов из переносимой заметки, порядок слов в заметке и в запросе должен быть одинаковым.
Примеры:        ./plan.sh m tomorrow кино с Машей 
                Перенесет заметку "Идем в кино с Машей" на завтрашюю дату.
                ./plan.sh move tomorrow today качалка
								Предположим, что были созданы повторяющиеся заметки со словом `качалка`, данная команда перенесет одну запись с сегодняшнего дня на завтра, не тронув остальные.

e (или edit):   Редактирует заметку с помощью внешнего редактора, указанного в переменной окружения EDITOR. Если переменная EDITOR пуста, то будет выведено сообщение, и редактирования не произойдет. Из текста, введенного в редакторе, берется только первая строка. Если в редакторе удалить весь текст, то заметка будет удалена из базы. Формат вызова: [ДАТА] [ГРУППА] [ТЕКСТ]. Параметры используются для поиска нужной заметки, как и в команде move.

Команды add и repeat принимают необязательный ключ "-e", который работает аналогично команде edit. В случае использования этого ключа в командной строке можно не писать текст заметки, а ввести его во внешнем редакторе. Если текст был указан в командной строке, он будет скопирован в редактор.

II. plan_cal.sh
Основное назначение скрипта -- выводить календарь на текущий месяц в Conky, подсвечивая определенные даты. Строка вызова скрипта в файле конфигурации Conky выглядит примерно так: ${execp plan_cal.sh [ДАТА КОЛИЧЕСТВО]}. Использование execp обусловлено тем, что скрипт использует цветовые тэги Conky, чтобы подсвечивать текущую дату, а также даты, связанные с заметками.
Необязательная пара параметров ДАТА КОЛИЧЕСТВО позволяет управлять выводом так:

ДАТА задает месяц, для которого надо вывести календарь. В связи с ограничениями команды date, писать только месяц не получится, должен быть определен также и день. Допустимые форматы дат: "now" (текущий месяц), "+1 month" (следующий месяц), "06/01" (Июнь).
КОЛИЧЕСТВО задает, на сколько месяцев, считая начальный, будет выведен календарь. Например: plan_cal.sh now 3 выведет календарь на текущий месяц и два следующих. Вывод осуществляется горизонтально. 

Поведение календаря может быть настроено путем создания в домашней директории пользователя файла .plancalrc. В файл можно записать следующие параметры, влияющие на календарь:

CURRENT_DATE_COLOR (по умолчанию orange) -- цвет, которым подсвечивается текущая дата.  Могут быть использованы как названия цветов (orange, red, blue), так и HEX-коды (#FF4D00, #00FF00)

IMPORTANT_COLOR (по умолчанию #FF4D00) -- цвет, которым подсвечивается дата, относящаяся хотя бы к одной заметке.

ONLY_IMPORTANT (по умолчанию 0) -- если этот параметр больше 0, то в календаре подсвечиваются только даты, относящиеся к заметкам, помеченным как важные (о важных заметках см. далее), в противном случае, подсвечиваются все даты, для которых есть заметки.

Пример конфигурационного файла (знак = не должен быть отделен пробелами):
ONLY_IMPORTANT=1
CURRENT_DATE_COLOR=green
IMPORTANT_COLOR=red

III. weekplan.sh
Выводит список заметок на неделю. Может быть использован как совместно с Conky, так и отдельно.  Строка вызова скрипта в файле конфигурации Conky выглядит примерно так: ${execp weekplan}. Поведение скрипта может быть настроено путем создания в домашней директории пользователя файла .weekplanrc 

В файл можно записать следующие параметры:

OVERALL_WIDTH (по умолчанию 50) -- ширина списка в символах. Заголовок с датой выравнивается
по правому краю этого поля.

TAG_FIELD_WIDTH (по умолчанию 6) -- ширина поля для категории заметки. Поле OVERALL_WIDTH
делится между текстом заметки и ее категорией. Категория занимает правую часть шириной
TAG_FIELD_WIDTH и выравнивается по ее правому краю. Текст заметки занимает оставшуюся часть
и выравнивается по левому краю. Ширина поля текста вычисляется по формуле: 
OVERALL_WIDTH - TAG_FIELD_WIDTH - 1

CURRENT_DATE_COLOR (по умолчанию orange) -- цвет, которым подсвечивается текущая дата.
Могут быть использованы как названия цветов (orange, red, blue), так и HEX-коды (#FF4D00, #00FF00)

IMPORTANT_COLOR (по умолчанию #FF4D00) -- цвет, которым подсвечиваются важные заметки.

FLOW_MODE (по умолчанию 0) -- если параметр больше 0, то период "неделя" будет трактоваться как
"7 дней, начиная с сегодняшнего", в противном случае будет использоваться календарная неделя --
будут показаны все заметки от текущего дня по ближайшего понедельника.

CON_OUTPUT (по умолчанию 0) -- если параметр равен 0, то скрипт будет использовать цветовые тэги
Conky для выделения заметок, в противном случае будет выведен обычный текст. Таким образом,
при CON_OUTPUT=1 скрипт пригоден для использования в обычном терминале.

Пример конфигурационного файла (знак = не должен быть отделен пробелами):
CURRENT_DATE_COLOR=green
FLOW_MODE=1
OVERALL_WIDTH=60
TAG_FIELD_WIDTH=8

IV. plan_vacuum.sh
Очищает базу данных от записей, даты которых уже в прошлом. Не имеет параметров, рекомендуется к
периодическому запуску с помощью cron.

V. libplan.sh
Скрипт содержит в себе функции по работе с базой, с помощью которых функционируют все остальные скрипты.
